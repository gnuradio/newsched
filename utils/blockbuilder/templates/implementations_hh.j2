{% macro set_implementations(implementations, callbacks) %}
enum class available_impl { {% for impl in implementations %}{{ impl['id'] | upper }}{{ ", " if not loop.last }}{% endfor %} };
static sptr make(const block_args& args = {}, available_impl impl = available_impl::{{implementations[0]['id'] | upper }});

{% for impl in implementations %}
/**
* @brief Set the implementation to {{ impl['id'] | upper }} and return a shared pointer to the block instance
* 
* @return std::shared_ptr<{{ block }}> 
*/
static sptr make_{{impl['id']}}(const block_args& args);
{% endfor %}
    
{% for cb in callbacks -%}
virtual  {{cb['return']}} {{cb['id']}} (
{% if 'args' in cb -%}
{% for arg in cb['args'] -%}
{{arg['dtype']}} {{arg['id']}}{{ ", " if not loop.last }}
{% endfor -%}
{% endif -%}
) {% if cb['const'] %}const {%endif%} = 0;
{% endfor %}
{%- endmacro -%}