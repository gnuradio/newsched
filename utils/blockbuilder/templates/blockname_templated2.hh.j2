#pragma once
{% set blocktype = 'sync' if properties|selectattr("id", "equalto", "blocktype")|map(attribute='value')|first == 'sync' else 'general' -%}
{% set typekey = properties|selectattr("id", "equalto", "type")|map(attribute="key")|first %}
{% if blocktype == 'sync' -%}
#include <gnuradio/sync_block.hh>
{% elif blocktype == 'general' -%}
#include <gnuradio/block.hh>
{% endif -%}
#include <gnuradio/types.hh>

namespace gr {
namespace {{module}} {

template <{% for key in properties|selectattr("id", "equalto", "templates")|map(attribute="keys")|first -%}{{key['type']}} {{key['id']}}{{ ", " if not loop.last }}{%endfor%}>
class {{ block }} : public {{ 'sync_block' if blocktype == 'sync' else 'block'}}
{
public:
    struct block_args {
        {% for param in parameters -%}
        {{ param['dtype'] }} {{ param['id'] }}{% if 'default' in param %} = {{ param['default']|lower if param['dtype'] == 'bool' else param['default']}} {% endif %};
        {% endfor -%}};
    typedef std::shared_ptr<{{ block }}> sptr;
    {{ block }}(const block_args& args) : sync_block("{{ block }}")
    {
        {% for port in ports %}
        add_port(port<{{port['type']}}>::make("{{ port['id'] }}", 
                                    {{ 'port_direction_t::INPUT' if port['direction'] == "input" else 'port_direction_t::OUTPUT' }}, 
                                    std::vector<size_t>{{ port['dims'] }}));
        {% endfor %}
    }

    enum class available_impl { {% for impl in implementations %}{{ impl['id'] | upper }}{{ ", " if not loop.last }}{% endfor %} };
    static sptr make(const block_args& args = {}, available_impl impl = available_impl::{{implementations[0]['id'] | upper }});

    {% for impl in implementations -%}
    /**
     * @brief Set the implementation to {{ impl['id'] | upper }} and return a shared pointer to the block instance
     * 
     * @return std::shared_ptr<{{ block }}> 
     */
    static sptr make_{{impl['id']}}(const block_args& args = {});
    {% endfor %} 

    {% for cb in callbacks -%}
    virtual {{cb['return']}} {{cb['id']}} (
    {% if 'args' in cb -%}
    {% for arg in cb['args'] -%}
    {{arg['dtype']}}{{ ", " if not loop.last }}
    {% endfor %}
    {% endif %}
    ) = 0;
    {% endfor %} 
};

{% for opt in properties|selectattr("id", "equalto", "type")|map(attribute="options")|first -%}
typedef {{block}}<{{ opt['dtype']}}> {{block}}_{{ opt['suffix'] }};
{% endfor -%}

} // namespace {{ module }}
} // namespace gr
