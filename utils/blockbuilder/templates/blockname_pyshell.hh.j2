#pragma once

#include <gnuradio/{{module}}/{{block}}.hh>

namespace gr {
namespace {{module}} {

class {{block}}_pyshell : public {{block}}
{
public:
    {{block}}_pyshell(const typename {{block}}::block_args& args) : {{blocktype}}("{{block}}_pyshell"), {{block}}(args)
    {
        
    }

    work_return_code_t
    work(std::vector<block_work_input_sptr>& work_input,
                                std::vector<block_work_output_sptr>& work_output)
    {
        py::gil_scoped_acquire acquire;

        py::object ret = this->d_py_handle.attr("work")(
            work_input, work_output);

        return ret.cast<work_return_code_t>();
    }

    bool start(void)
    {
        py::gil_scoped_acquire acquire;
        if (py::hasattr(this->d_py_handle, "start")) {
            py::object ret = this->d_py_handle.attr("start")();
            return ret.cast<bool>() && block::start();
        }
        else
            return block::start();
    }

    bool stop(void)
    {
        py::gil_scoped_acquire acquire;
        if (py::hasattr(this->d_py_handle, "stop")) {
            py::object ret = this->d_py_handle.attr("stop")();
            return ret.cast<bool>() && block::stop();
        }
        else
            return block::stop();
    }


};


} // namespace {{module}}
} // namespace gr
