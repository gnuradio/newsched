#pragma once
{% set blocktype = 'sync' if properties|selectattr("id", "equalto", "blocktype")|map(attribute='value')|first == 'sync' else 'general' -%}
{% set typekey = properties|selectattr("id", "equalto", "type")|map(attribute="key")|first %}
{% if blocktype == 'sync' -%}
#include <gnuradio/sync_block.hpp>
{% elif blocktype == 'general' -%}
#include <gnuradio/block.hpp>
{% endif -%}
#include <gnuradio/types.hpp>

namespace gr {
namespace {{module}} {

template <class {{typekey}}>
class {{ block }} : public {{ 'sync_block' if blocktype == 'sync' else 'block'}}
{
public:
    struct block_args {
        {% for param in parameters -%}
        {{ param['dtype'] }} {{ param['id'] }}{% if 'default' in param %} = {{param['default']}} {% endif %};
        {% endfor -%}};
    typedef std::shared_ptr<{{ block }}> sptr;
    {{ block }}(block_args args) : sync_block("{{ block }}")
    {
        {% for port in ports %}
        add_port(port<{{typekey}}>::make("{{ port['id'] }}", 
                                    {{ 'port_direction_t::INPUT' if port['direction'] == "input" else 'port_direction_t::OUTPUT' }}, 
                                    std::vector<size_t>{{ port['dims'] }}));
        {% endfor %}
    }

    enum class available_impl { {% for impl in implementations %}{{ impl['id'] | upper }}{{ ", " if not loop.last }}{% endfor %} };
    static sptr make(block_args args, available_impl impl = available_impl::{{implementations[0]['id'] | upper }})
    {
        switch (impl) {
        {% for impl in implementations %}
        case available_impl::{{ impl['id'] | upper }}:
            return make_{{ impl['id'] | lower }}(args);
            break;
        {% endfor %}
        default:
            throw std::invalid_argument(
                "invalid implementation specified");
        }
    }

    {% for impl in implementations -%}
    /**
     * @brief Set the implementation to {{ impl['id'] | upper }} and return a shared pointer to the block instance
     * 
     * @return std::shared_ptr<{{ block }}> 
     */
    static sptr make_{{impl['id']}}(const block_args& args);
    {% endfor %} 
};

{% for opt in properties|selectattr("id", "equalto", "type")|map(attribute="options")|first -%}
typedef multiply_const<{{ opt['dtype']}}> multiply_const_{{ opt['suffix'] }};
{% endfor -%}

} // namespace {{ module }}
} // namespace gr
