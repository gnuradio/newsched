{% macro header() -%}
/*
 * This file is part of GNU Radio
 *
 * SPDX-License-Identifier: GPL-3.0-or-later
 *
 */

/************************************************************/
/* This file is AUTOMATICALLY GENERATED using blockbuilder  */
/*       and should not manually edited                     */
/************************************************************/
{% endmacro %}

{% macro includes(includes) -%}
{% for incl in includes %}
#include <{{incl['value']}}>
{% endfor %}
{% endmacro %}

{% macro blocktype(properties) -%}
{% set blocktype = 'sync' if properties|selectattr("id", "equalto", "blocktype")|map(attribute='value')|first == 'sync' else 'general' -%}
{% if blocktype == 'sync' -%}
#include <gnuradio/sync_block.h>
{% elif blocktype == 'general' -%}
#include <gnuradio/block.h>
{% endif -%}
{% endmacro %}

{% macro class_statement(block, blocktype) -%}
class {{ block }} : virtual public {{blocktype}}{#{{',' if inherits != ''}}  {{ inherits }}#}
{% endmacro %}

{% macro block_args(parameters) -%}
    struct block_args {
        {% if parameters %} {% for param in parameters -%}{% if 'cotr' not in param or param['cotr'] == true %}
        {% if param['container'] == 'vector' -%}
        std::vector<{{ param['dtype'] }}> {{ param['id'] }}{% if 'default' in param %} = {{param['default']}}{% endif %};
        {% else %}
        {{ param['dtype'] }} {{ param['id'] }}{% if 'default' in param %} = {{param['default']}}{% endif %};
        {% endif %}
        {% endif %}{% endfor -%}{% endif %}};
{% endmacro %}

{% macro cotr_statement(block) -%}
{{ block }}(const block_args& args);
{% endmacro %}

{% macro get_linked_value(value, ports, parameters, typekeys) -%}
    {% set newvalue = value -%}
    {% if '/' in value | string() -%}
    {% set list1 = value.split('/') -%}
    {% set category = list1[0] -%}
        {% if category == 'ports' -%}
            {% set newvalue = list1[1] -%}
        {% elif category == 'parameters' -%}
            {% set newvalue = 'args.' + list1[1] -%}
        {% elif category == 'typekeys' -%}
            {% set newvalue = list1[1] -%}
        {% endif -%}
    {% endif -%}
{{newvalue}}{% endmacro -%}

{% macro ports(ports, parameters, typekeys) -%}
        {% for port in ports %}
        {% set porttype = get_linked_value(port['type']) -%}
        {% if port['domain'] != 'message' -%}
        {% if 'multiplicity' not in port%}     
        {% if port['type'] == 'untyped'%}                                  
        add_port(untyped_port::make(
            "{{ port['id'] }}", 
            {{ 'port_direction_t::INPUT' if port['direction'] == "input" else 'port_direction_t::OUTPUT' }}, 
            {{ get_linked_value(port['size'])}}));
        {% else %}
        add_port(port<{{porttype}}>::make("{{ port['id'] }}", 
                            {{ 'port_direction_t::INPUT' if port['direction'] == "input" else 'port_direction_t::OUTPUT' }}
                            {% if 'dims' in port %}, std::vector<size_t>{ {{ get_linked_value(port['dims'])}} } {% endif %}));
        {% endif %}
        {% else %}
        {% if port['type'] == 'untyped'%}   
        for (size_t i = 0; i < {{ get_linked_value(port['multiplicity'])}}; i++) {
        add_port(untyped_port::make(
            "{{ port['id'] }}" + std::to_string(i), 
            {{ 'port_direction_t::INPUT' if port['direction'] == "input" else 'port_direction_t::OUTPUT' }}, 
            {{ get_linked_value(port['size'])}}));
        }
        {% else %}
        for (size_t i = 0; i < {{ get_linked_value(port['multiplicity'])}}; i++) {
        add_port(port<{{porttype}}>::make("{{ port['id'] }}" + std::to_string(i), 
                            {{ 'port_direction_t::INPUT' if port['direction'] == "input" else 'port_direction_t::OUTPUT' }}
                            {% if 'dims' in port %}, std::vector<size_t>{ {{ get_linked_value(port['dims'])}} } {% endif %}));
        }
        {% endif %}
        {% endif -%}
        {% else %}
        {% if port['direction'] == 'input' %}
        _msg_{{port['id']}} = message_port::make(
            "{{port['id']}}", port_direction_t::INPUT);
        _msg_{{port['id']}}->register_callback([this](pmtf::pmt msg) { this->handle_msg_{{port['id']}}(msg); });
        add_port(_msg_{{port['id']}});
        {% else %}
        _msg_{{port['id']}} = message_port::make(
            "{{port['id']}}", port_direction_t::OUTPUT);
        add_port(_msg_{{port['id']}});
        {% endif %}
        {% endif -%}
        {% endfor %}
{% endmacro %}

{% macro implementations(implementations) -%}
    enum class available_impl { {% for impl in implementations %}{{ impl['id'] | upper }},{% endfor %} PYSHELL };
    static sptr make(const block_args& args, available_impl impl = available_impl::{{implementations[0]['id'] | upper }});
    static sptr make_from_params(const std::string& json_str, available_impl impl = available_impl::{{implementations[0]['id'] | upper }});

    {% set vars = {'pyshell': False} %}
    {% for impl in implementations %}
    {% if 'lang' not in impl or impl['lang'] == 'cpp' -%}
    /**
     * @brief Set the implementation to {{ impl['id'] | upper }} and return a shared pointer to the block instance
     * 
     * @return std::shared_ptr<{{ block }}> 
     */
    static sptr make_{{impl['id']}}(const block_args& args);
    {% elif 'lang' in impl and impl['lang'] == 'python' and not vars.pyshell -%}
    static sptr make_pyshell(const block_args& args);
    {% if vars.update({'pyshell': True}) %} {% endif %}
    {% endif -%}
    {% endfor %}


{% endmacro %}

{% macro callbacks(callbacks) -%}
    {% for cb in callbacks -%}
    {% if 'inherited' not in cb or not cb['inherited'] -%}
    virtual  {{cb['return']}} {{cb['id']}} (
    {% if 'args' in cb -%}
    {% for arg in cb['args'] -%}
    {{arg['dtype']}} {{arg['id']}}{{ ", " if not loop.last }}
    {% endfor -%}
    {% endif -%}
    ) {% if cb['const'] %}const {%endif%} = 0;
    {% endif -%}
    {% endfor %} 
{% endmacro %}

{% macro message_ports(ports) -%}
    {% for port in ports %}{% if port['domain'] == 'message' -%}
        message_port_sptr _msg_{{port['id']}};
    {% endif %}{% endfor %}
    {% for port in ports %}{% if port['domain'] == 'message' and port['direction'] == 'input' -%}
    virtual void handle_msg_{{port['id']}}(pmtf::pmt msg) {} //= 0;
    {% endif %}{% endfor%}
{% endmacro %}

{% macro parameter_declarations(parameters) -%}
{% if parameters -%}
public:
    {% for p in parameters -%}
        {% if p['container'] == 'vector' -%}
            {% if p['settable']%}
    virtual void set_{{p['id']}}(std::vector<{{p['dtype']}}> {{p['id']}}); 
            {% endif -%}
            {% if p['settable'] and not 'gettable' in p or p['gettable'] %}
    virtual std::vector<{{p['dtype']}}> {{p['id']}}();
            {% endif -%}
        {% else -%}
            {% if p['settable']%}
    virtual void set_{{p['id']}}({{p['dtype']}} {{p['id']}}); 
            {% endif -%}
            {% if p['settable'] and not 'gettable' in p or p['gettable'] %}
    virtual {{p['dtype']}} {{p['id']}}();
            {% endif -%}
        {% endif -%}
    {% endfor -%}
protected:
    enum params : uint32_t { {% for p in parameters -%}{#% if p['settable'] or p['gettable'] %#}id_{{p['id']}},{#% endif %#}{% endfor %} num_params };
{% for p in parameters -%}
{#% if p['settable'] or p['gettable'] %#}{% if 'serializable' not in p or p['serializable'] %}
    {% if 'string' in p['dtype'] %}
    pmt_sptr param_{{p['id']}};
    {% else %}
    pmt_sptr param_{{p['id']}};
    {% endif %}
    
{% endif %}
{% endfor -%}
{% endif -%}
{% endmacro %}

{% macro parameter_instantiations(parameters) -%}
{% if parameters -%}
    //d_param_str_map = {{"{"}} {% for p in parameters -%}{% if p['settable'] or p['gettable'] %}{{"{"}}"{{p['id']}}", id_{{p['id']}}{{"}"}},{% endif %} {% endfor -%}{{"}"}};
    d_param_str_map = {{"{"}} {% for p in parameters -%}{{"{"}}"{{p['id']}}", id_{{p['id']}}{{"}"}},{% endfor -%}{{"}"}};
    d_str_param_map = {{"{"}} {% for p in parameters -%}{{"{"}}id_{{p['id']}}, "{{p['id']}}"{{"}"}},{% endfor -%}{{"}"}};
{% for p in parameters -%}
{#% if p['settable'] or p['gettable']%#}{% if 'serializable' not in p or p['serializable'] %}
    {% if 'string' in p['dtype'] %}
    //param_{{p['id']}} = string_param::make(params::id_{{p['id']}}, 
    //    "{{p['id']}}"{{", args."+p['id'] if 'cotr' not in p or p['cotr']}});
    param_{{p['id']}} = std::make_shared<pmtf::pmt>(pmtf::string({{"args."+p['id'] if 'cotr' not in p or p['cotr']}}));
    {% else %}
    //param_{{p['id']}} = {{ 'scalar' if 'container' not in p else p['container']}}_param<{{p['dtype']}}>::make(params::id_{{p['id']}}, 
    //    "{{p['id']}}"{{", args."+p['id'] if 'cotr' not in p or p['cotr']}});
    {%if 'cotr' not in p or p['cotr']%}
    param_{{p['id']}} = std::make_shared<pmtf::pmt>({{"args."+p['id']}});
    {%else%}
    param_{{p['id']}} = std::make_shared<pmtf::pmt>(pmtf::{{'scalar' if 'container' not in p else p['container']}}<{{p['dtype']}}>());
    {%endif%}
    {% endif %}
    add_param("{{p['id']}}", d_param_str_map["{{p['id']}}"], param_{{p['id']}});
{% endif %}
{% endfor -%}
{% endif -%}
{% endmacro %}
