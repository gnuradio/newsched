{% import 'macros.j2' as macros -%}
{{ macros.header() }}

namespace gr {
namespace {{module}} {

{%if typekeys | length > 0 -%}
template <{% for key in typekeys -%}{{key['type']}} {{key['id']}}{{ ", " if not loop.last }}{%endfor%}>
typename {{block}}<{% for key in typekeys -%}{{key['id']}}{{ ", " if not loop.last }}{%endfor%}>::sptr {{block}}<{% for key in typekeys -%}{{key['id']}}{{ ", " if not loop.last }}{%endfor%}>::make_{{impl}}(const block_args& args)
{
    return std::make_shared<{{block}}_{{impl}}<{% for key in typekeys -%}{{key['id']}}{{ ", " if not loop.last }}{%endfor%}>>(args);
}
{%else-%}
{{block}}::sptr {{block}}::make_{{impl}}(const block_args& args)
{
    return std::make_shared<{{block}}_{{impl}}>(args);
}
{%endif-%}

{%if typekeys | length == 1 -%}
{%set key1 = typekeys|first %}
{% for opt in key1['options'] -%}
template class {{block}}<{{ opt['value']}}>;
{% endfor -%}
{% elif typekeys | length == 2 -%}
{%set key1 = typekeys|first %}
{%set key2 = typekeys|last %}
{% for opt1 in key1['options'] -%}
{% for opt2 in key2['options'] -%}
template class {{block}}<{{ opt1['value']|lower if key1['type'] == 'bool' else opt1['value']}}, {{ opt2['value']|lower if key2['type'] == 'bool' else opt2['value']}}>;
{% endfor -%}
{% endfor -%}
{% endif -%}

{%if typekeys | length == 1 -%}
#define INHERITED_CONSTRUCTORS(type) {{blocktype}}("{{block}}", "{{module}}"), {{block}}<type>(args)
{%elif typekeys | length == 2 -%}
#define INHERITED_CONSTRUCTORS(type1,type2) {{blocktype}}("{{block}}", "{{module}}"), {{block}}<type1,type2>(args)
{%else-%}
#define INHERITED_CONSTRUCTORS {{blocktype}}("{{block}}", "{{module}}"), {{block}}(args)
{% endif %}

} // namespace {{module}}
} // namespace gr
