#pragma once

#include <pybind11/embed.h>
#include <pybind11/pybind11.h> // must be first
#include <pybind11/stl.h>
namespace py = pybind11;

#include <gnuradio/{{module}}/{{block}}.h>
#include <gnuradio/pyblock_detail.h>

namespace gr {
namespace {{module}} {

class {{block}}_pyshell : public {{block}}
{
public:
    {{block}}_pyshell(const typename {{block}}::block_args& args) : {{blocktype}}("{{block}}", "{{module}}"), {{block}}(args)
    {
        
    }

{% if blocktype != "hier_block" %}
    work_return_code_t
    work(std::vector<block_work_input_sptr>& work_input,
                                std::vector<block_work_output_sptr>& work_output)
    {
        py::gil_scoped_acquire acquire;

        py::object ret = this->pb_detail()->handle().attr("work")(
            work_input, work_output);

        return ret.cast<work_return_code_t>();
    }

    bool start(void)
    {
        py::gil_scoped_acquire acquire;
        if (py::hasattr(this->pb_detail()->handle(), "start")) {
            py::object ret = this->pb_detail()->handle().attr("start")();
            return ret.cast<bool>() && block::start();
        }
        else
            return block::start();
    }

    bool stop(void)
    {
        py::gil_scoped_acquire acquire;
        if (py::hasattr(this->pb_detail()->handle(), "stop")) {
            py::object ret = this->pb_detail()->handle().attr("stop")();
            return ret.cast<bool>() && block::stop();
        }
        else
            return block::stop();
    }
{% endif %}

};


} // namespace {{module}}
} // namespace gr
