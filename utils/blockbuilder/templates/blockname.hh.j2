/*
 * This file is part of GNU Radio
 *
 * SPDX-License-Identifier: GPL-3.0-or-later
 *
 */

/************************************************************/
/* This file is AUTOMATICALLY GENERATED using blockbuilder  */
/*       and should not manually edited                     */
/************************************************************/

#pragma once

{% for incl in includes %}
#include <{{incl['include']}}>
{% endfor %}

{% set blocktype = 'sync' if properties|selectattr("id", "equalto", "blocktype")|map(attribute='value')|first == 'sync' else 'general' -%}
{% if blocktype == 'sync' -%}
#include <gnuradio/sync_block.hh>
{% elif blocktype == 'general' -%}
#include <gnuradio/block.hh>
{% endif -%}
namespace gr {
namespace {{module}} {

class {{ block }} : public {{ 'sync_block' if blocktype == 'sync' else 'block'}}
{
public:
    struct block_args {
        {% for param in parameters -%}
        {{ param['dtype'] }} {{ param['id'] }}{% if 'default' in param %} = {{param['default']}}{% endif %};
        {% endfor -%}};
    
    typedef std::shared_ptr<{{ block }}> sptr;
    {{ block }}(block_args args) : {{"sync_block" if blocktype == 'sync' else "block"}}("{{ block }}")
    {
        {% for port in ports %}
        {% if port['domain'] == 'stream' -%}
        {% if 'multiplicity' not in port%}
        add_port(untyped_port::make(
            "{{ port['id'] }}", 
            {{ 'port_direction_t::INPUT' if port['direction'] == "input" else 'port_direction_t::OUTPUT' }}, 
            {{'args.' if properties|selectattr("id", "equalto", port['size'])}}{{ port['size'] }}));
        {% else %}
        {% set m = 'args.' + port['multiplicity'] if parameters|selectattr("id", "equalto", port['multiplicity']) else port['multiplicity'] %}
        for (size_t i = 0; i < {{m}}; i++) {
        add_port(untyped_port::make(
            "{{ port['id'] }}" + std::to_string(i), 
            {{ 'port_direction_t::INPUT' if port['direction'] == "input" else 'port_direction_t::OUTPUT' }}, 
            {{'args.' if properties|selectattr("id", "equalto", port['size'])}}{{ port['size'] }}));
        }
        {% endif -%}
        {% else %}
        {% if port['direction'] == 'input' %}
        _msg_{{port['id']}} = message_port::make(
            "{{port['id']}}", port_direction_t::INPUT);
        _msg_{{port['id']}}->register_callback([this](pmtf::pmt_sptr msg) { this->handle_msg_{{port['id']}}(msg); });
        add_port(_msg_{{port['id']}});
        {% else %}
        _msg_{{port['id']}} = message_port::make(
            "{{port['id']}}", port_direction_t::OUTPUT);
        add_port(_msg_{{port['id']}});
        {% endif %}
        {% endif -%}
        {% endfor %}
    }

    enum class available_impl { {% for impl in implementations %}{{ impl['id'] | upper }}{{ ", " if not loop.last }}{% endfor %} };
    static sptr make(const block_args& args, available_impl impl = available_impl::{{implementations[0]['id'] | upper }});

    {% for impl in implementations %}
    /**
     * @brief Set the implementation to {{ impl['id'] | upper }} and return a shared pointer to the block instance
     * 
     * @return std::shared_ptr<{{ block }}> 
     */
    static sptr make_{{impl['id']}}(const block_args& args);
    {% endfor %}

    {% for cb in callbacks -%}
    virtual  {{cb['return']}} {{cb['id']}} (
    {% if 'args' in cb -%}
    {% for arg in cb['args'] -%}
    {{arg['dtype']}} {{arg['id']}}{{ ", " if not loop.last }}
    {% endfor -%}
    {% endif -%}
    ) {% if cb['const'] %}const {%endif%} = 0;
    {% endfor %}     

    protected:
    {% for port in ports %}{% if port['domain'] == 'message' -%}
        message_port_sptr _msg_{{port['id']}};
    {% endif %}{% endfor %}
    {% for port in ports %}{% if port['domain'] == 'message' and port['direction'] == 'input' -%}
    virtual void handle_msg_{{port['id']}}(pmtf::pmt_sptr msg) = 0;
    {% endif %}{% endfor%}
};

} // namespace {{ module }}
} // namespace gr
