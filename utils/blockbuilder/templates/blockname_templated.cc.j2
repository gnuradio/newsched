{% import 'macros.j2' as macros -%}
{{ macros.header() }}
{% set typekeys = properties|selectattr("id", "equalto", "templates")|map(attribute="keys")|first %}
{% set blocktype = 'sync' if properties|selectattr("id", "equalto", "blocktype")|map(attribute='value')|first == 'sync' else 'general' -%}
#include <gnuradio/{{module}}/{{block}}.hh>

namespace gr {
namespace {{module}} {

template <{% for key in typekeys -%}{{key['type']}} {{key['id']}}{{ ", " if not loop.last }}{%endfor%}>
typename {{block}}<{% for key in typekeys -%}{{key['id']}}{{ ", " if not loop.last }}{%endfor%}>::sptr {{block}}<{% for key in typekeys -%}{{key['id']}}{{ ", " if not loop.last }}{%endfor%}>::make(const block_args& args, available_impl impl)
{
    switch (impl) {
    {% for impl in implementations %}
    #ifdef HAVE_{{ impl['id'] | upper }}
    case available_impl::{{ impl['id'] | upper }}:
        return make_{{ impl['id'] | lower }}(args);
        break;
    #endif
    {% endfor %}
    default:
        throw std::invalid_argument(
            "invalid implementation specified");
    }
}

template <{% for key in typekeys -%}{{key['type']}} {{key['id']}}{{ ", " if not loop.last }}{%endfor%}>
{{block}}<{% for key in typekeys -%}{{key['id']}}{{ ", " if not loop.last }}{%endfor%}>::{{block}}(const block_args& args) : {{"sync_block" if blocktype == 'sync' else "block"}}("{{ block }}") {
 {{ macros.ports(ports, parameters) }}
 {{ macros.parameter_instantiations(parameters) }}

}

// Settable Parameters
{% for p in parameters -%}
{% if p['settable']%}
template <{% for key in typekeys -%}{{key['type']}} {{key['id']}}{{ ", " if not loop.last }}{%endfor%}>
void {{block}}<{% for key in typekeys -%}{{key['id']}}{{ ", " if not loop.last }}{%endfor%}>::set_{{p['id']}}({{p['dtype']}} {{p['id']}})
{
    return request_parameter_change(params::id_{{p['id']}},
                                    pmtf::pmt_scalar<{{p['dtype']}}>({{p['id']}}));
}
{% endif -%}
{% if p['settable'] and not 'gettable' in p or p['gettable'] %}
template <{% for key in typekeys -%}{{key['type']}} {{key['id']}}{{ ", " if not loop.last }}{%endfor%}>
{{p['dtype']}} {{block}}<{% for key in typekeys -%}{{key['id']}}{{ ", " if not loop.last }}{%endfor%}>::{{p['id']}}()
{
    return pmtf::get_pmt_scalar<{{p['dtype']}}>(
                request_parameter_query(params::id_{{p['id']}}))
        .value(); 
}
{% endif %}
{% endfor -%}

{%set key1 = typekeys|first %}
{% for opt in key1['options'] -%}
template class {{block}}<{{ opt['value']}}>;
{% endfor -%}

} // namespace {{ module }}
} // namespace gr
