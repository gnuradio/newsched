{% import 'macros.j2' as macros -%}
{{ macros.header() }}

#include <gnuradio/{{module}}/{{block}}.hh>

namespace gr {
namespace {{module}} {

{{block}}::sptr {{block}}::make(const block_args& args, available_impl impl)
{
    switch (impl) {
    {% for impl in implementations %}
    #ifdef HAVE_{{ impl['id'] | upper }}
    case available_impl::{{ impl['id'] | upper }}:
        return make_{{ impl['id'] | lower }}(args);
        break;
    #endif
    {% endfor %}

    //case available_impl::BASE:
    //    return std::make_shared<{{block}}>(args);
    //    break;
        
    default:
        throw std::invalid_argument(
            "invalid implementation specified");
    }
}

{{block}}::{{block}}(const block_args& args) : {{blocktype}}("{{ block }}") {
 {{ macros.ports(ports, parameters) }}
 {{ macros.parameter_instantiations(parameters) }}
}

// Settable Parameters
{% if parameters %}
{% for p in parameters -%}
{% if p['settable']%}
void {{block}}::set_{{p['id']}}({{p['dtype']}} {{p['id']}})
{
    return request_parameter_change(params::id_{{p['id']}},
                                    pmtf::{{ 'scalar' if 'container' not in p else p['container']}}<{{p['dtype']}}>({{p['id']}}));
}
{% endif -%}
{% if p['settable'] and not 'gettable' in p or p['gettable'] %}
{{p['dtype']}} {{block}}::{{p['id']}}()
{
    return pmtf::get_{{ 'scalar' if 'container' not in p else p['container']}}<{{p['dtype']}}>(
                request_parameter_query(params::id_{{p['id']}}))
        .value(); 
}
{% endif %}
{% endfor -%}
{% endif %}


} // namespace {{ module }}
} // namespace gr
