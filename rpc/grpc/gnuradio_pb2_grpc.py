# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import gnuradio_pb2 as gnuradio__pb2


class GNURadioStub(object):
    """The greeting service definition.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateFlowgraph = channel.unary_unary(
                '/gnuradio.GNURadio/CreateFlowgraph',
                request_serializer=gnuradio__pb2.FlowgraphCreateRequest.SerializeToString,
                response_deserializer=gnuradio__pb2.GenericReply.FromString,
                )
        self.CreateBlock = channel.unary_unary(
                '/gnuradio.GNURadio/CreateBlock',
                request_serializer=gnuradio__pb2.BlockCreateRequest.SerializeToString,
                response_deserializer=gnuradio__pb2.GenericReply.FromString,
                )
        self.ConnectBlocks = channel.unary_unary(
                '/gnuradio.GNURadio/ConnectBlocks',
                request_serializer=gnuradio__pb2.FlowgraphConnectBlocksRequest.SerializeToString,
                response_deserializer=gnuradio__pb2.FlowgraphConnectBlocksReply.FromString,
                )
        self.StartFlowgraph = channel.unary_unary(
                '/gnuradio.GNURadio/StartFlowgraph',
                request_serializer=gnuradio__pb2.FlowgraphActionRequest.SerializeToString,
                response_deserializer=gnuradio__pb2.GenericReply.FromString,
                )
        self.StopFlowgraph = channel.unary_unary(
                '/gnuradio.GNURadio/StopFlowgraph',
                request_serializer=gnuradio__pb2.FlowgraphActionRequest.SerializeToString,
                response_deserializer=gnuradio__pb2.GenericReply.FromString,
                )
        self.WaitFlowgraph = channel.unary_unary(
                '/gnuradio.GNURadio/WaitFlowgraph',
                request_serializer=gnuradio__pb2.FlowgraphActionRequest.SerializeToString,
                response_deserializer=gnuradio__pb2.GenericReply.FromString,
                )


class GNURadioServicer(object):
    """The greeting service definition.
    """

    def CreateFlowgraph(self, request, context):
        """Sends a greeting
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateBlock(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ConnectBlocks(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StartFlowgraph(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StopFlowgraph(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def WaitFlowgraph(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_GNURadioServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreateFlowgraph': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateFlowgraph,
                    request_deserializer=gnuradio__pb2.FlowgraphCreateRequest.FromString,
                    response_serializer=gnuradio__pb2.GenericReply.SerializeToString,
            ),
            'CreateBlock': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateBlock,
                    request_deserializer=gnuradio__pb2.BlockCreateRequest.FromString,
                    response_serializer=gnuradio__pb2.GenericReply.SerializeToString,
            ),
            'ConnectBlocks': grpc.unary_unary_rpc_method_handler(
                    servicer.ConnectBlocks,
                    request_deserializer=gnuradio__pb2.FlowgraphConnectBlocksRequest.FromString,
                    response_serializer=gnuradio__pb2.FlowgraphConnectBlocksReply.SerializeToString,
            ),
            'StartFlowgraph': grpc.unary_unary_rpc_method_handler(
                    servicer.StartFlowgraph,
                    request_deserializer=gnuradio__pb2.FlowgraphActionRequest.FromString,
                    response_serializer=gnuradio__pb2.GenericReply.SerializeToString,
            ),
            'StopFlowgraph': grpc.unary_unary_rpc_method_handler(
                    servicer.StopFlowgraph,
                    request_deserializer=gnuradio__pb2.FlowgraphActionRequest.FromString,
                    response_serializer=gnuradio__pb2.GenericReply.SerializeToString,
            ),
            'WaitFlowgraph': grpc.unary_unary_rpc_method_handler(
                    servicer.WaitFlowgraph,
                    request_deserializer=gnuradio__pb2.FlowgraphActionRequest.FromString,
                    response_serializer=gnuradio__pb2.GenericReply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'gnuradio.GNURadio', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class GNURadio(object):
    """The greeting service definition.
    """

    @staticmethod
    def CreateFlowgraph(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/gnuradio.GNURadio/CreateFlowgraph',
            gnuradio__pb2.FlowgraphCreateRequest.SerializeToString,
            gnuradio__pb2.GenericReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateBlock(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/gnuradio.GNURadio/CreateBlock',
            gnuradio__pb2.BlockCreateRequest.SerializeToString,
            gnuradio__pb2.GenericReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ConnectBlocks(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/gnuradio.GNURadio/ConnectBlocks',
            gnuradio__pb2.FlowgraphConnectBlocksRequest.SerializeToString,
            gnuradio__pb2.FlowgraphConnectBlocksReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def StartFlowgraph(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/gnuradio.GNURadio/StartFlowgraph',
            gnuradio__pb2.FlowgraphActionRequest.SerializeToString,
            gnuradio__pb2.GenericReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def StopFlowgraph(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/gnuradio.GNURadio/StopFlowgraph',
            gnuradio__pb2.FlowgraphActionRequest.SerializeToString,
            gnuradio__pb2.GenericReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def WaitFlowgraph(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/gnuradio.GNURadio/WaitFlowgraph',
            gnuradio__pb2.FlowgraphActionRequest.SerializeToString,
            gnuradio__pb2.GenericReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
