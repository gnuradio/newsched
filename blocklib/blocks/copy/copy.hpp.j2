#pragma once
{% if properties['blocktype'] == 'sync' %}
#include <gnuradio/sync_block.hpp>
{% elif properties['blocktype'] == 'general' %}
#include <gnuradio/block.hpp>
{% endif %}
namespace gr {
namespace {{module}} {

class {{ block }} : public {{ 'sync_block' if properties['blocktype'] == 'sync' else 'block'}}
{
public:
    typedef std::shared_ptr<{{ block }}> sptr;
    {{ block }}({% for param in parameters %}{{ param['dtype'] }} {{ param['id'] }}{{ ", " if not loop.last }}{% endfor %}) : sync_block("{{ block }}")
    {
        {% for port in ports %}
        add_port(untyped_port::make(
            "{{ port['id'] }}", 
            {{ 'port_direction_t::INPUT' if port['direction'] == "input" else 'port_direction_t::OUTPUT' }}, 
            {{ port['size'] }}));
        {% endfor %}
    }

    {% for impl in implementations %}
    /**
     * @brief Set the implementation to {{ impl['id'] | upper }} and return a shared pointer to the block instance
     * 
     * @return std::shared_ptr<{{ block }}> 
     */
    static sptr {{impl['id']}}({% for param in parameters %}{{ param['dtype'] }} {{ param['id'] }}{{ ", " if not loop.last }}{% endfor %});
    {% endfor %}
};

} // namespace {{ module }}
} // namespace gr
