module: soapy
block: source
label: source
blocktype: block
inherits: gr::soapy::block

# This needs a lot of work - for soapy there is an N:1 relationship 
#  between the grc files and block
#  Do we 
#   1) have all that info here and generate multiple files
#   2) have multiple grc files in tree and don't generate
grc:
  flags: [python]
  templates:
      imports: |- 
        from newsched import soapy
      make: |-
        self.${id} = soapy.source_${T.fcn}(${device},${nchan})
        self.${id}.set_sample_rate(0, samp_rate)
        self.${id}.set_gain_mode(0, False)
        self.${id}.set_frequency(0, ${frequency})
        self.${id}.set_frequency_correction(0, 0)
        self.${id}.set_gain(0, 'TUNER', ${gain})
typekeys:
  - id: T
    type: class
    options: 
      - value: gr_complex 
        suffix: cc 
    #   - value: float
    #     suffix: ff 

includes:
  - value: gnuradio/soapy/block.hh

parameters:
-   id: device
    label: Device
    dtype: const std::string&
    settable: false
-   id: nchan
    label: Number of Channels
    dtype: size_t
    settable: false
-   id: dev_args
    label: Device Args
    dtype: const std::string&
    settable: false
    default: '""'
-   id: stream_args
    label: Stream Args
    dtype: const std::string&
    settable: false
    default: '""'
-   id: tune_args
    label: Tune Args
    dtype: const std::vector<std::string>&
    settable: false
    default: std::vector<std::string>{""}
-   id: other_settings
    label: Other Settings
    dtype: const std::vector<std::string>&
    settable: false
    default: std::vector<std::string>{""}
    grc:
        default: '[]'
# Gain here is a hack to get rtl-sdr to work
-   id: gain
    label: Gain
    dtype: float
    settable: false
    cotr: false
    default: 42
-   id: frequency
    label: Frequency
    dtype: float
    settable: false
    cotr: false
    default: 2400000000

ports:
# -   domain: stream
#     id: in
#     direction: input
#     type: T

-   domain: stream
    id: out
    direction: output
    type: typekeys/T
    multiplicity: parameters/nchan

implementations:
-   id: cpu
# -   id: cuda

file_format: 1