module: qtgui
block: freq_sink
label: QT GUI Frequency Sink
blocktype: sync_block

grc:
  flags: [python]
  templates:
    imports: |-
      from PyQt5 import Qt
      from gnuradio import qtgui
      from gnuradio.kernel.filter import firdes
      import sip
    make: |
      <%
          win = 'self._%s_win'%id
      %>\
      qtgui.freq_sink_${T.fcn}(${fftsize},${wintype},${fc},${bw},${name},${nconnections})
      self.${id}.set_update_time(0.10)
      self.${id}.set_y_axis(-140, 10)
      self.${id}.set_y_label('Relative Gain', 'dB')
      # self.${id}.set_trigger_mode(qtgui.TRIG_MODE_FREE, 0.0, 0, "")
      self.${id}.enable_autoscale(False)
      self.${id}.enable_grid(False)
      self.${id}.set_fft_average(1.0)
      self.${id}.enable_axis_labels(True)
      self.${id}.enable_control_panel(False)
      self.${id}.set_fft_window_normalized(False)
      ${win} = sip.wrapinstance(self.${id}.qwidget(), Qt.QWidget)
      ${gui_hint() % win}

typekeys:
  - id: T
    type: class
    options: 
        - cf32
        - rf32

parameters:
-   id: fftsize
    label: FFT Size
    dtype: size_t
    settable: false
-   id: wintype
    label: Window Type
    dtype: int
    settable: false
-   id: fc
    label: Center Frequency
    dtype: double
    settable: false
-   id: bw
    label: Bandwidth
    dtype: double
    settable: false
-   id: name
    label: Name
    dtype: std::string
    settable: false
-   id: nconnections
    label: Num Connections
    dtype: size_t
    settable: false
    default: 1
-   id: gui_hint
    label: GUI Hint
    dtype: gui_hint
    cotr: false
    grc:
      hide: part
    serializable: false

ports:
-   domain: stream
    id: in
    direction: input
    type: typekeys/T

includes: 
  - gnuradio/kernel/fft/fftw_fft.h
  - gnuradio/kernel/fft/window.h
  - gnuradio/qtgui/utils.h
  - gnuradio/qtgui/trigger_mode.h
  - qapplication.h
  - qwt_legend.h
  - qwt_painter.h
  - qwt_plot.h
  - qwt_plot_canvas.h
  - qwt_plot_curve.h
  - qwt_plot_magnifier.h
  - qwt_plot_marker.h
  - qwt_plot_panner.h
  - qwt_plot_zoomer.h
  - qwt_scale_engine.h
  - qwt_scale_widget.h
  - qwt_symbol.h

callbacks:
    # virtual void exec_() = 0;
    # virtual QWidget* qwidget() = 0;
-   id: exec_
    return: void
-   id: qwidget
    return: QWidget*
    binding: |- 
        [](gr::qtgui::freq_sink<T>& self) { return reinterpret_cast<uintptr_t>(self.qwidget()); }

    # virtual void set_fft_size(const int fftsize) = 0;
-   id: set_fft_size
    return: void
    args:
    - id: fftsize
      dtype: const int
    # virtual int fft_size() const = 0;
-   id: fft_size
    return: int
    const: true
    # virtual void set_fft_average(const float fftavg) = 0;
-   id: set_fft_average
    return: void
    args:
    - id: fftavg
      dtype: const float
    # virtual float fft_average() const = 0;
-   id: fft_average
    return: float
    const: true
    # virtual void set_fft_window(const gr::kernel::fft::window::win_type win) = 0;
-   id: set_fft_window
    return: void
    args:
    - id: win
      dtype: const gr::kernel::fft::window::win_type
    # virtual gr::kernel::fft::window::win_type fft_window() = 0;
-   id: fft_window
    return: gr::kernel::fft::window::win_type
    const: true
    # //! If true, normalize window to unit power
    # virtual void set_fft_window_normalized(const bool enable) = 0;
-   id: set_fft_window_normalized
    return: void
    args:
    - id: enable
      dtype: const bool
    # virtual void set_frequency_range(const double centerfreq, const double bandwidth) = 0;
-   id: set_frequency_range
    return: void
    args:
    - id: centerfreq
      dtype: const double
    - id: bandwidth
      dtype: const double
    # virtual void set_y_axis(double min, double max) = 0;
-   id: set_y_axis
    return: void
    args:
    - id: min
      dtype: double
    - id: max
      dtype: double
    # virtual void set_update_time(double t) = 0;
-   id: set_update_time
    return: void
    args:
    - id: time
      dtype: double

    # virtual void set_title(const std::string& title) = 0;
-   id: set_title
    return: void
    args:
    - id: title
      dtype: const std::string&
    # virtual void set_y_label(const std::string& label, const std::string& unit) = 0;
-   id: set_y_label
    return: void
    args:
    - id: label
      dtype: const std::string&
    - id: unit
      dtype: const std::string&
      default: ""
    # virtual void set_line_label(unsigned int which, const std::string& label) = 0;
-   id: set_line_label
    return: void
    args:
    - id: which
      dtype: unsigned int
    - id: label
      dtype: const std::string&
    # virtual void set_line_color(unsigned int which, const std::string& color) = 0;
-   id: set_line_color
    return: void
    args:
    - id: which
      dtype: unsigned int
    - id: color
      dtype: const std::string&
    # virtual void set_line_width(unsigned int which, int width) = 0;
-   id: set_line_width
    return: void
    args:
    - id: which
      dtype: unsigned int
    - id: width
      dtype: int
    # virtual void set_line_style(unsigned int which, int style) = 0;
-   id: set_line_style
    return: void
    args:
    - id: which
      dtype: unsigned int
    - id: style
      dtype: int
    # virtual void set_line_marker(unsigned int which, int marker) = 0;
-   id: set_line_marker
    return: void
    args:
    - id: which
      dtype: unsigned int
    - id: marker
      dtype: int
    # virtual void set_line_alpha(unsigned int which, double alpha) = 0;
-   id: set_line_alpha
    return: void
    args:
    - id: which
      dtype: unsigned int
    - id: alpha
      dtype: double
    # virtual void set_plot_pos_half(bool half) = 0;
-   id: set_plot_pos_half
    return: void
    args:
    - id: half
      dtype: bool
    # virtual void set_trigger_mode(trigger_mode mode,
    #                               float level,
    #                               int channel,
    #                               const std::string& tag_key = "") = 0;
-   id: set_trigger_mode
    return: void
    args:
    - id: mode
      dtype: trigger_mode
    - id: level
      dtype: float
    - id: channel
      dtype: int
    - id: tag_key
      dtype: const std::string&
      default: ""

    # virtual std::string title() = 0;
-   id: title
    return: std::string
    # virtual std::string line_label(unsigned int which) = 0;
-   id: line_label
    return: std::string
    args:
    - id: which
      dtype: unsigned int
    # virtual std::string line_color(unsigned int which) = 0;
-   id: line_color
    return: std::string
    args:
    - id: which
      dtype: unsigned int
    # virtual int line_width(unsigned int which) = 0;
-   id: line_width
    return: int
    args:
    - id: which
      dtype: unsigned int
    # virtual int line_style(unsigned int which) = 0;
-   id: line_style
    return: int
    args:
    - id: which
      dtype: unsigned int
    # virtual int line_marker(unsigned int which) = 0;
-   id: line_marker
    return: int
    args:
    - id: which
      dtype: unsigned int
    # virtual double line_alpha(unsigned int which) = 0;
-   id: line_alpha
    return: double
    args:
    - id: which
      dtype: unsigned int

    # virtual void set_size(int width, int height) = 0;
-   id: set_size
    return: void
    args:
    - id: width
      dtype: int
    - id: height
      dtype: int
    # virtual void enable_menu(bool en = true) = 0;
-   id: enable_menu
    return: void
    args:
    - id: en
      dtype: bool
      default: 'true'
    # virtual void enable_grid(bool en = true) = 0;
-   id: enable_grid
    return: void
    args:
    - id: en
      dtype: bool
      default: 'true'
    # virtual void enable_autoscale(bool en = true) = 0;
-   id: enable_autoscale
    return: void
    args:
    - id: en
      dtype: bool
      default: 'true'
    # virtual void enable_control_panel(bool en = true) = 0;
-   id: enable_control_panel
    return: void
    args:
    - id: en
      dtype: bool
      default: 'true'
    # virtual void enable_max_hold(bool en) = 0;
-   id: enable_max_hold
    return: void
    args:
    - id: en
      dtype: bool
    # virtual void enable_min_hold(bool en) = 0;
-   id: enable_min_hold
    return: void
    args:
    - id: en
      dtype: bool
    # virtual void clear_max_hold() = 0;
-   id: clear_max_hold
    return: void
    # virtual void clear_min_hold() = 0;
-   id: clear_min_hold
    return: void
    # virtual void disable_legend() = 0;
-   id: disable_legend
    return: void
    # virtual void reset() = 0;
-   id: reset
    return: void
    # virtual void enable_axis_labels(bool en = true) = 0;
-   id: enable_axis_labels
    return: void
    args:
    - id: en
      dtype: bool
      default: 'true'

implementations:
-   id: cpu
# -   id: cuda

file_format: 1
