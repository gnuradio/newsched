module: qtgui
block: time_sink
label: QT GUI Time Sink
blocktype: sync_block

grc:
  flags: [python]
  templates:
    imports: |-
      from PyQt5 import Qt
      from gnuradio import qtgui
      from gnuradio.kernel.filter import firdes
      import sip
    make: |
      <%
          win = 'self._%s_win'%id
      %>\
      qtgui.time_sink_${T.fcn}(${size},${samp_rate},${name},${nconnections})
      ${win} = sip.wrapinstance(self.${id}.qwidget(), Qt.QWidget)
      ${gui_hint() % win}

typekeys:
- id: T
  type: class
  options: 
        - cf32
        - rf32

parameters:
-   id: size
    label: Size
    dtype: size_t
    settable: false
-   id: samp_rate
    label: Sampling Rate
    dtype: double
    settable: false
-   id: name
    label: Name
    dtype: std::string
    settable: false
-   id: nconnections
    label: Num Connections
    dtype: size_t
    settable: false
    default: 1
# -   id: parent
#     label: Parent
#     dtype: QWidget*
#     settable: false 
#     default: nullptr
-   id: gui_hint
    label: GUI Hint
    dtype: gui_hint
    grc: 
      hide: part
    cotr: false
    serializable: false
# Includes go in the blockname.h
includes: 
  - qapplication.h
  - qwt_legend.h
  - qwt_painter.h
  - qwt_plot.h
  - qwt_plot_canvas.h
  - qwt_plot_curve.h
  - qwt_plot_magnifier.h
  - qwt_plot_marker.h
  - qwt_plot_panner.h
  - qwt_plot_zoomer.h
  - qwt_scale_engine.h
  - qwt_scale_widget.h
  - qwt_symbol.h

ports:
-   domain: stream
    id: in
    direction: input
    type: typekeys/T

implementations:
-   id: cpu


    # virtual void exec_() = 0;
    # virtual QWidget* qwidget() = 0;



callbacks:
-   id: exec_
    return: void
-   id: qwidget
    return: QWidget*
    binding: |- 
        [](gr::qtgui::time_sink<T>& self) { return reinterpret_cast<uintptr_t>(self.qwidget()); }
    # virtual void set_y_axis(double min, double max) = 0;
-   id: set_y_axis
    return: void
    args:
    - id: min
      dtype: double
    - id: max
      dtype: double
    # virtual void set_y_label(const std::string& label, const std::string& unit = "") = 0;
-   id: set_y_label
    return: void
    args:
    - id: label
      dtype: const std::string&
    - id: unit
      dtype: const std::string&
      default: ""
    # virtual void set_update_time(double t) = 0;
-   id: set_update_time
    return: void
    args:
    - id: time
      dtype: double
    # virtual void set_title(const std::string& title) = 0;
-   id: set_title
    return: void
    args:
    - id: title
      dtype: const std::string&
    # virtual void set_line_label(unsigned int which, const std::string& label) = 0;
-   id: set_line_label
    return: void
    args:
    - id: which
      dtype: unsigned int
    - id: label
      dtype: const std::string&
    # virtual void set_line_color(unsigned int which, const std::string& color) = 0;
-   id: set_line_color
    return: void
    args:
    - id: which
      dtype: unsigned int
    - id: color
      dtype: const std::string&
    # virtual void set_line_width(unsigned int which, int width) = 0;
-   id: set_line_width
    return: void
    args:
    - id: which
      dtype: unsigned int
    - id: width
      dtype: int
    # virtual void set_line_style(unsigned int which, int style) = 0;
-   id: set_line_style
    return: void
    args:
    - id: which
      dtype: unsigned int
    - id: style
      dtype: int
    # virtual void set_line_marker(unsigned int which, int marker) = 0;
-   id: set_line_marker
    return: void
    args:
    - id: which
      dtype: unsigned int
    - id: marker
      dtype: int
    # virtual void set_nsamps(const int newsize) = 0;
-   id: set_nsamps
    return: void
    args:
    - id: newsize
      dtype: const int
    # virtual void set_samp_rate(const double samp_rate) = 0;
-   id: set_samp_rate
    return: void
    args:
    - id: samp_rate
      dtype: const double
    # virtual void set_line_alpha(unsigned int which, double alpha) = 0;
-   id: set_line_alpha
    return: void
    args:
    - id: which
      dtype: unsigned int
    - id: alpha
      dtype: double
    # virtual void set_trigger_mode(trigger_mode mode,
    #                               trigger_slope slope,
    #                               float level,
    #                               float delay,
    #                               int channel,
    #                               const std::string& tag_key = "") = 0;

    # virtual std::string title() = 0;
    # virtual std::string line_label(unsigned int which) = 0;
    # virtual std::string line_color(unsigned int which) = 0;
    # virtual int line_width(unsigned int which) = 0;
    # virtual int line_style(unsigned int which) = 0;
    # virtual int line_marker(unsigned int which) = 0;
    # virtual double line_alpha(unsigned int which) = 0;

    # virtual void set_size(int width, int height) = 0;
-   id: set_size
    return: void
    args:
    - id: width
      dtype: int
    - id: height
      dtype: int
    # virtual void enable_menu(bool en = true) = 0;
    # virtual void enable_grid(bool en = true) = 0;
    # virtual void enable_autoscale(bool en = true) = 0;
    # virtual void enable_stem_plot(bool en = true) = 0;
    # virtual void enable_semilogx(bool en = true) = 0;
    # virtual void enable_semilogy(bool en = true) = 0;
    # virtual void enable_control_panel(bool en = true) = 0;
    # virtual void enable_tags(unsigned int which, bool en) = 0;
    # virtual void enable_tags(bool en) = 0;
    # virtual void enable_axis_labels(bool en = true) = 0;
    # virtual void disable_legend() = 0;

    # virtual int nsamps() const = 0;
    # virtual void reset() = 0;



file_format: 1
